[gd_scene load_steps=12 format=3 uid="uid://bj7pd5x1t6skh"]

[ext_resource type="Texture2D" uid="uid://xv7tycs6l53p" path="res://assets/player.png" id="1_3v0y5"]
[ext_resource type="AudioStream" uid="uid://deodpvfg753un" path="res://assets/Jump 3 Dan Knoflicek.mp3" id="6_5dmks"]
[ext_resource type="AudioStream" uid="uid://dox1266wb5pf8" path="res://assets/Jump 1 Dan Knoflicek.mp3" id="7_fsrk5"]

[sub_resource type="GDScript" id="GDScript_ub4pc"]
script/source = "extends CharacterBody2D

const ACCELERATION = 1200.0
const FRICTION = 1200.0
const AIR_RESISTANCE = 100
const MAX_SPEED = 300.0
const MAX_JUMP_HEIGHT = -550.0

#keeps track of the keys the player has
var keys_found = []

#makes it so enemies cant see the player
var is_invurnable = false
var is_crouching = false
var can_jump = false
var can_wall_jump = false
var old_wall_normal = Vector2.ZERO

#tracks if the sfx_jump_land has already played
var already_landed = false
var has_jumped = false

#Sound effects
@onready var sfx_jump_start = $JumpStartSFX
@onready var sfx_jump_land = $JumpLandSFX

@onready var sprite_2d = $Sprite2D
@onready var animation_player = $AnimationPlayer
@onready var coyote_timer := $CoyoteTimer
@onready var wall_jump_timer = $WallJumpTimer


var gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")


#States
enum {
	MOVE,
	IDLE,
	JUMP,
	WALL_JUMP,
	CROUCH
}

var player_action = IDLE

func _physics_process(delta):
	
	var input_axis = Input.get_axis(\"move_left\", \"move_right\")
	
	var was_on_floor = is_on_floor()
	var was_on_wall = is_on_wall_only()
	if was_on_wall:
		old_wall_normal = get_wall_normal()
	
	apply_gravity(delta)
	handle_jump()
	handle_wall_jump()
	handle_acceleration(input_axis, delta)
	apply_friction(input_axis, delta)
	apply_air_resistance(input_axis, delta)
	escape_to_menu()
	handle_animations()
	handle_landing(input_axis)
	move_and_slide()
	
	var just_left_ledge = was_on_floor and not is_on_floor() and velocity.y >= 0
		
	if just_left_ledge:
		coyote_timer.start()
		can_jump = true

	var just_left_wall = was_on_wall and not is_on_wall()
	
	if just_left_wall:
		#this was missing some () at the end. Adding () seemed to break it tho
		wall_jump_timer.start
		can_wall_jump = true

	if Input.is_action_just_pressed(\"crouch\"):
		print(\"You're crouching\")
		is_crouching = true
		
	if Input.is_action_just_released(\"crouch\"):
		print(\"You're no longer crouching\")
		is_crouching = false

func apply_gravity(delta):
	if !is_on_floor():
		velocity.y += gravity * delta
		player_action = JUMP
	else:
		can_jump = true

func handle_jump():
	
	if is_on_floor() or coyote_timer.time_left > 0.0:
		if Input.is_action_pressed(\"jump\"):
			if can_jump:
				velocity.y = MAX_JUMP_HEIGHT
				can_jump = false
				player_action = JUMP
	if !is_on_floor():
		if Input.is_action_just_released(\"jump\") and velocity.y < MAX_JUMP_HEIGHT / 2:
			velocity.y = MAX_JUMP_HEIGHT / 2
	
func handle_wall_jump():
	if !is_on_wall_only() and wall_jump_timer.time_left <= 0.0:
		return
	var wall_normal = get_wall_normal()
	if wall_jump_timer.time_left > 0.0:
		wall_normal = old_wall_normal
	if is_on_wall() or wall_jump_timer.time_left > 0.0:
		if Input.is_action_just_pressed(\"jump\"):
			if can_wall_jump:
				velocity.x = wall_normal.x * MAX_SPEED * 0.8
				velocity.y = MAX_JUMP_HEIGHT * 0.7
				player_action = WALL_JUMP
	
func handle_acceleration(input_axis, delta):
	if input_axis != 0:
		velocity.x = move_toward(velocity.x, MAX_SPEED * input_axis, ACCELERATION * delta)
		sprite_2d.flip_h = (input_axis < 0)
	
	if Input.is_action_pressed(\"move_left\") or Input.is_action_pressed(\"move_right\"):
		if is_on_floor():
			player_action = MOVE
	
	if Input.is_action_just_released(\"move_left\") or Input.is_action_just_released(\"move_right\"):
		player_action = IDLE

func apply_friction(input_axis, delta):
	if input_axis == 0:
		velocity.x = move_toward(velocity.x, 0, FRICTION * delta)

func apply_air_resistance(input_axis, delta):
	if input_axis == 0 and !is_on_floor():
		velocity.x = move_toward(velocity.x, 0, AIR_RESISTANCE * delta)

func escape_to_menu():
	if Input.is_action_just_pressed(\"escape\"):
		MenuManager.set_menu(\"res://Menus/title_menu.tscn\")
		MenuManager.add_transition()
		
func handle_animations():
	match player_action:
		MOVE:
			if is_on_floor:
				animation_player.play(\"run\")
		JUMP:
			if has_jumped == false:
				animation_player.play(\"jump\")
		WALL_JUMP:
			animation_player.play(\"jump\")
		IDLE:
			if is_on_floor():
				animation_player.play(\"idle\")

func handle_landing(input_axis):
	
	if  !is_on_floor():
		already_landed = false
	
	if is_on_floor() and !already_landed:
		sfx_jump_land.play()
		already_landed = true
		has_jumped = false
		if input_axis == 0:
			player_action = IDLE
		else:
			player_action = MOVE

func _on_jump_animation_finished():
	has_jumped = true
"

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_xpmbs"]
radius = 7.0
height = 44.0

[sub_resource type="OccluderPolygon2D" id="OccluderPolygon2D_162l7"]
closed = false
polygon = PackedVector2Array(5, 32, 5, 30, 3, 26, 4, 21, 4, 14, 6, 9, 4, -1, 4, -4, 6, -8, 6, -10, 5, -13, 3, -16, 0, -17, -4, -16, -6, -13, -7, -10, -6, -4, -8, -1, -10, 9, -9, 13, -7, 13, -8, 20, -8, 25, -11, 30, -11, 32, -6, 32, -2, 18, -1, 18, 0, 32)

[sub_resource type="Animation" id="Animation_yp6tc"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [0]
}

[sub_resource type="Animation" id="Animation_feb81"]
resource_name = "idle"
length = 0.1
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [0]
}

[sub_resource type="Animation" id="Animation_74owe"]
resource_name = "jump"
length = 0.5
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3, 0.4, 0.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [7, 8, 9, 9, 10, 11]
}
tracks/1/type = "method"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath(".")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0.4),
"transitions": PackedFloat32Array(1),
"values": [{
"args": [],
"method": &"_on_jump_animation_finished"
}]
}

[sub_resource type="Animation" id="Animation_7uaxq"]
resource_name = "run"
length = 0.5
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3, 0.4, 0.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [1, 2, 3, 4, 5, 6]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_n77sk"]
_data = {
"RESET": SubResource("Animation_yp6tc"),
"idle": SubResource("Animation_feb81"),
"jump": SubResource("Animation_74owe"),
"run": SubResource("Animation_7uaxq")
}

[node name="Player" type="CharacterBody2D" groups=["player"]]
z_index = 1
collision_layer = 2
collision_mask = 5
script = SubResource("GDScript_ub4pc")

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -9.5)
texture = ExtResource("1_3v0y5")
hframes = 13

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visible = false
shape = SubResource("CapsuleShape2D_xpmbs")

[node name="CoyoteTimer" type="Timer" parent="."]
wait_time = 0.2
one_shot = true

[node name="WallJumpTimer" type="Timer" parent="."]
wait_time = 0.5
one_shot = true

[node name="Camera2D" type="Camera2D" parent="."]
zoom = Vector2(2, 2)
drag_horizontal_enabled = true

[node name="LightOccluder2D" type="LightOccluder2D" parent="."]
visible = false
position = Vector2(1, -9)
occluder = SubResource("OccluderPolygon2D_162l7")
sdf_collision = false

[node name="JumpStartSFX" type="AudioStreamPlayer" parent="."]
stream = ExtResource("6_5dmks")
volume_db = -20.0

[node name="JumpLandSFX" type="AudioStreamPlayer" parent="."]
stream = ExtResource("7_fsrk5")
volume_db = -20.0

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_n77sk")
}
autoplay = "idle"
